name: CI/CD ITIL Demo Application

on:
  push:
    branches: ["main", "develop"]
  pull_request:
    branches: ["main", "develop"]
  workflow_dispatch:

env:
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build:
    name: Build Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"

      - name: Restore dependencies
        run: dotnet restore

      - name: Run code build
        run: dotnet build --no-restore --configuration Release
  sonarcloud-analysis:
    name: SonarCloud Analysis
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"

      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          dotnet tool install --global dotnet-sonarscanner

      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner begin /k:"Arme94_DemoItil" /o:"arme94-demoitil" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.vstest.reportsPaths="**/*.trx" /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" /d:sonar.qualitygate.wait=true /d:sonar.analysis.mode=publish
          dotnet build --no-restore
          dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

  test:
    name: Run Tests
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"

      - name: Restore dependencies
        run: dotnet restore

      - name: Test placeholder
        run: echo "Aquí se ejecutarán pruebas unitarias e integración en el futuro"
  build-and-push:
    name: Build and Push Docker Image
    needs: [test, sonarcloud-analysis]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/demoitil:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/demoitil:${{ github.sha }}

  deploy-to-production:
    name: Deploy to Production
    needs: build-and-push
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Detener contenedor anterior si existe
        run: |
          podman stop demoitil 2>$null
          podman rm demoitil 2>$null
        continue-on-error: true

      - name: Descargar la nueva imagen
        run: podman pull ${{ secrets.DOCKERHUB_USERNAME }}/demoitil:latest

      - name: Ejecutar nuevo contenedor
        run: |
          podman run -d --name demoitil -p 8080:80 ${{ secrets.DOCKERHUB_USERNAME }}/demoitil:latest

  deploy-to-staging:
    name: Deploy to Staging
    needs: build-and-push
    runs-on: self-hosted
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Placeholder for staging deployment
        run: |
          echo "============================================================"
          echo "Este es un placeholder para la configuración futura de staging"
          echo "============================================================"
